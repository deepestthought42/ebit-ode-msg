syntax = "proto2";

package EbitODEMessages;


/* structure to map, one-to-one, nuclides with mass A, proton number Z and charge state q
 * onto an index i: {A,Z,q} -> i */

message Index {
    required int32 A = 1; // mass number
    required int32 Z = 2; // proton number
    required int32 q = 3; // charge state
    required int32 i = 4; // index
}

/* structure to describe Rate constants */

message MatrixValue {
    required double Value  = 1; 
    required string Description = 2; 
    required Index row = 3; 
    required Index column = 4; 
}


/* Service definitions */

enum Status {
    Idle = 0;
    SolivingODEInProgress = 1;
}

message Update {
    required Status status = 1;
    required string Message = 2;
}


enum ProblemType {
    ODEProblem = 0;
}



message TimeSpan {
    required double start = 1;
    required double stop = 2;
}


message ValueForIndex {
    required Index index = 1;
    required double value = 2;
}

message DiffEqParameters {
    repeated double qVe = 1;
    repeated double qVt = 2;
    repeated double mass_number = 3;
    repeated double spitzer_divided_by_overlap = 4;
    required double electron_radius_in_m_squared = 5;
    required double one_over_pi_times_L = 6;
    
    repeated MatrixValue inverted_collision_constant = 7;
    repeated MatrixValue dCharge_ex_divided_by_N_times_tau = 9;
    repeated MatrixValue rate_of_change_divided_by_N = 10;

    required int32 no_dimensions = 11;
    repeated Index indices = 12;
    repeated double initial_population = 13;
    repeated double initial_temperature = 14;
}

message ProblemParameters {
    required ProblemType problem_type = 1;
    required TimeSpan time_span = 2;
}

message SolverParameters {
    repeated double saveat = 1;   
}

message SolveODEProblem {
    required ProblemParameters problem_parameters = 1;
    required DiffEqParameters diff_eq_parameters = 2;
    required SolverParameters sovler_parameters = 3;
}


message ValuesPerIndex {
    required Index index = 1;
    repeated double values = 2;
}

enum ReturnCode {
    Default = 0;
    Success = 1;
    MaxIters = 2;
    DtLessThanMin = 3;
    Unstable = 4;
    InitialFailure = 5;
    ConvergenceFailure = 6;
    Failure = 7;
}


message Result {
    required SolveODEProblem problem = 1;
    required ReturnCode return_code = 2;
    required double start_time = 3;
    required double stop_time = 4;
    repeated double times = 5;
    repeated ValuesPerIndex values = 6;
}


message ErrorEncountered {
    required string msg = 1;
}

enum MessageType {
    SolveODE = 1;
    ODEResult = 2;
    StatusUpdate = 3;
    StopServer = 4;
    Error = 5;
}



message Message {
    required MessageType MsgType = 1;
    optional SolveODEProblem ODEProblem = 2;
    optional Result ODEResult = 3;
    optional Status status = 4;
    optional ErrorEncountered err = 5;
}